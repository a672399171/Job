<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace用于java代码调用时识别指定xml的mapper文件 -->
<mapper namespace="mapping.JobMapper">
    <!-- 使用resultMap映射实体类和字段之间的一一对应关系 -->
    <resultMap type="com.zzu.model.Job" id="jobResultMap" autoMapping="true">
        <id property="id" column="id"></id>
        <association property="type" javaType="com.zzu.model.Position">
            <id property="id" column="type"/>
            <result property="name" column="p_name"/>
        </association>
        <association property="post_company" javaType="com.zzu.model.Company" autoMapping="true">
            <id property="id" column="post_company"/>
            <result property="type" column="company_type"></result>
            <result property="name" column="person_name"></result>
        </association>
    </resultMap>

    <resultMap type="com.zzu.model.Comment" id="commentResultMap" autoMapping="true">
        <id property="id" column="id"></id>
        <association property="user" javaType="com.zzu.model.User">
            <id property="id" column="u_id"/>
            <result property="photo_src" column="photo_src"></result>
            <result property="nickname" column="nickname"></result>
        </association>
    </resultMap>

    <resultMap id="collectionResultMap" type="com.zzu.model.Collection" autoMapping="true">
        <association property="user" javaType="com.zzu.model.User">
            <id property="id" column="u_id"></id>
        </association>
        <association property="job" resultMap="jobResultMap" autoMapping="true">
            <id property="id" column="j_id"></id>
        </association>
    </resultMap>

    <resultMap id="applyResultMap" type="com.zzu.model.Apply" autoMapping="true">
        <association property="resume" javaType="com.zzu.model.Resume" autoMapping="true">
            <id property="id" column="r_id"></id>
        </association>
        <association property="job" javaType="com.zzu.model.Job" autoMapping="true">
            <id property="id" column="j_id"></id>
            <result property="name" column="j_name"></result>
            <association property="post_company" javaType="com.zzu.model.Company">
                <result property="company_name" column="company_name"></result>
            </association>
        </association>
    </resultMap>

    <resultMap id="majorResultMap" type="com.zzu.model.Major">
        <id property="id" column="id"></id>
        <result property="major" column="major"></result>
        <association property="school" javaType="com.zzu.model.School">
            <id property="id" column="s_id"></id>
            <result property="school" column="school"></result>
        </association>
    </resultMap>

    <select id="getAllClassifies" resultType="com.zzu.model.Classify">
        SELECT * FROM tb_classify
    </select>

    <select id="getAllPositions" resultType="com.zzu.model.Position">
        SELECT * FROM tb_position
    </select>

    <select id="getJobsByCompany" resultMap="jobResultMap" parameterType="hashmap">
        SELECT j.*,p.name as p_name,c.id as post_company,
        c.username,c.password,c.company_name,c.address,c.name as person_name,c.phone,c.introduce,c.type as
        company_type,c.scope,c.email,c.logo,c.x,c.y,c.auth
        FROM tb_job j,tb_company c,tb_position p where
        j.type=p.id and j.post_company=c.id and post_company=#{id} order by j.post_time desc
        <if test="page != 0">
            limit ${start},${count}
        </if>
    </select>

    <select id="getCompanyJobCount" resultType="int" parameterType="int">
        SELECT count(*) FROM tb_job j,tb_company c,tb_position p where
        j.type=p.id and j.post_company=c.id and post_company=#{id}
    </select>

    <select id="getJobById" resultMap="jobResultMap" parameterType="int">
        SELECT j.*,p.name as p_name,c.id as post_company,
        c.username,c.password,c.company_name,c.address,c.name as person_name,c.phone,c.introduce,c.type as company_type,c.scope,c.email,c.logo,c.x,c.y,c.auth
        FROM tb_job j,tb_company c,tb_position p where j.type=p.id and j.post_company=c.id and j.id=#{id}
    </select>

    <select id="getSchools" resultType="com.zzu.model.School">
        SELECT * FROM tb_school
    </select>

    <select id="getRecentJobs" resultMap="jobResultMap" parameterType="int">
        SELECT j.*,p.name as p_name,c.id as post_company,
        c.username,c.password,c.company_name,c.address,c.name as person_name,c.phone,c.introduce,c.type as company_type,c.scope,c.email,c.logo,c.x,c.y,c.auth
        FROM tb_job j,tb_company c,tb_position p where j.type=p.id and j.post_company=c.id ORDER BY j.post_time desc limit #{num}
    </select>

    <update id="changeJobStatus" parameterType="hashmap">
        update tb_job set status=#{status} where id=#{j_id}
    </update>

    <update id="addSchool" parameterType="string">
        INSERT into tb_school(school) values(#{school})
    </update>

    <select id="getComments" resultMap="commentResultMap" parameterType="int">
        SELECT j.id as j_id,m.*,u.id as u_id,u.photo_src
        FROM tb_job j,tb_user u,tb_comment m
        where m.u_id=u.id and m.j_id=j.id and m.j_id=#{id} ORDER BY m.c_time desc
    </select>

    <select id="getCommentsPage" resultMap="commentResultMap" parameterType="hashmap">
        SELECT j.id as j_id,m.*,u.id as u_id,u.photo_src,u.nickname
        FROM tb_job j,tb_user u,tb_comment m
        where m.u_id=u.id and m.j_id=j.id and m.j_id=#{id} ORDER BY m.c_time desc
        <if test="page != 0">
            limit ${start},${count}
        </if>
    </select>

    <select id="getCollection" resultMap="collectionResultMap" parameterType="hashmap">
        select j.*,c.*,com.company_name,com.name as person_name,com.phone from tb_job j,tb_user u,tb_collection c,tb_company com where j.id=c.j_id and u.id=c.u_id and com.id=j.post_company
         and c.u_id=#{u_id} and c.j_id=#{j_id} limit 1
    </select>

    <select id="searchCollections" resultMap="collectionResultMap" parameterType="hashmap">
        select j.*,c.*,com.company_name,com.name as person_name,com.phone from tb_job j,tb_user u,tb_collection
        c,tb_company com where j.id=c.j_id and u.id=c.u_id and com.id=j.post_company
        and c.u_id=#{u_id}
        <if test="page != 0">
            limit ${start},${count}
        </if>
    </select>

    <select id="getApplies" resultMap="applyResultMap" parameterType="hashmap">
        select r.*,a.*,j.name as j_name,c.company_name from tb_resume r,tb_apply a,tb_job j,tb_company c WHERE a.r_id=r.id and a.j_id=j.id and j.post_company=c.id
        <if test="u_id != 0">
            and r.u_id=#{u_id}
        </if>
        <if test="j_id != 0">
            and a.j_id=#{j_id}
        </if>
        order by a.apply_date desc
    </select>

    <select id="getAppliesByCompany" parameterType="hashmap" resultMap="applyResultMap">
        select r.*,a.*,j.name as j_name from tb_resume r,tb_apply a,tb_job j WHERE a.r_id=r.id and a.j_id=j.id and
        j.post_company=#{id}
        <if test="page != 0">
            limit ${start},${count}
        </if>
    </select>

    <update id="updateApply" parameterType="hashmap">
        update tb_apply set state=#{state} where r_id=#{r_id} and j_id=#{j_id}
    </update>

    <select id="getCompanyApplyCount" parameterType="int" resultType="int">
        select count(*) from tb_resume r,tb_apply a,tb_job j WHERE a.r_id=r.id and a.j_id=j.id and j.post_company=#{id}
    </select>

    <insert id="addApply" parameterType="com.zzu.model.Apply">
        insert into tb_apply(u_id,j_id,state,apply_date) values(#{user.id},#{job.id},#{state},now())
    </insert>

    <delete id="deleteCollection" parameterType="hashmap">
        delete from tb_collection where u_id=#{u_id} and j_id=#{j_id}
    </delete>

    <delete id="addCollection" parameterType="hashmap">
        insert into tb_collection(u_id,j_id,collect_time) values(#{u_id},#{j_id},now())
    </delete>

    <update id="addMajors" parameterType="list">
        INSERT into tb_major(s_id,major) values
        <foreach item="item" index="index" collection="list">
            <choose>
                <when test="index == 0">
                    (2,#{item})
                </when>
                <otherwise>
                    ,(2,#{item})
                </otherwise>
            </choose>
        </foreach>
    </update>

    <insert id="addClassify" parameterType="com.zzu.model.Classify" useGeneratedKeys="true" keyProperty="id">
        insert into tb_classify(name) values(#{name})
    </insert>

    <update id="updateClassify" parameterType="com.zzu.model.Classify">
        update tb_classify set name=#{name} where id=#{id}
    </update>

    <delete id="deleteClassify" parameterType="int">
        delete from tb_classify where id=#{id}
    </delete>

    <insert id="addPosition" parameterType="com.zzu.model.Position">
        insert into tb_position(c_id,name) values(#{c_id},#{name})
    </insert>

    <update id="updatePosition" parameterType="com.zzu.model.Position">
        update tb_position set name=#{name} where id=#{id}
    </update>

    <delete id="deletePosition" parameterType="int">
        delete from tb_position where id=#{id}
    </delete>

    <select id="searchJobs" resultMap="jobResultMap" parameterType="hashmap">
        SELECT j.*,p.name as p_name,c.id as post_company,
        c.username,c.password,c.company_name,c.address,c.name as person_name,c.phone,c.introduce,c.type as
        company_type,c.scope,c.email,c.logo,c.x,c.y,c.auth
        FROM tb_job j,tb_company c,tb_position p where
        j.type=p.id and j.post_company=c.id and #{time} &amp; j.work_time &lt;&gt; 0
        <if test="p_ids != null">
            and j.type in
            <foreach item="item" index="index" collection="p_ids"
                     open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="l != -1">
            and j.low_salary &gt;=#{l}
        </if>
        <if test="h != -1">
            and j.high_salary &lt;=#{h}
        </if>
        <if test="filter != null">
            and (j.name like '%${filter}%' or c.company_name like '%${filter}%' or p.name like '%${filter}%')
        </if>
        <if test="state != 0">
            <choose>
                <when test="state == 1">
                    and j.status=0
                </when>
                <when test="state == 2">
                    and j.status=1
                </when>
            </choose>
        </if>
        ORDER BY j.post_time desc
        <if test="page != 0">
            limit ${start},${count}
        </if>
    </select>

    <select id="getJobCount" parameterType="hashmap" resultType="int">
        SELECT count(*) as num FROM tb_job j,tb_company c,tb_position p where
        j.type=p.id and j.post_company=c.id and #{time} &amp; j.work_time &lt;&gt; 0
        <if test="p_ids != null">
            and j.type in
            <foreach item="item" index="index" collection="p_ids"
                     open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="l != -1">
            and j.low_salary &gt;=#{l}
        </if>
        <if test="h != -1">
            and j.high_salary &lt;=#{h}
        </if>
        <if test="filter != null">
            and (j.name like '%${filter}%' or c.company_name like '%${filter}%' or p.name like '%${filter}%')
        </if>
        <if test="state != 0">
            <choose>
                <when test="state == 1">
                    and j.status=0
                </when>
                <when test="state == 2">
                    and j.status=1
                </when>
            </choose>
        </if>
        ORDER BY j.post_time desc
    </select>

    <select id="searchPositions" parameterType="com.zzu.model.Position" resultType="com.zzu.model.Position">
        select * from tb_position
        <if test="c_id != 0">
            where c_id=#{c_id}
        </if>
    </select>

    <select id="vagueSearchJobs" resultMap="jobResultMap" parameterType="hashmap">
        SELECT j.*,p.id as p_id,p.name as p_name,c.id as c_id,c.*,classify.id as classifyId FROM tb_job j,tb_company
        c,tb_position p,tb_classify classify where
        j.type=p.id and j.post_company=c.id and p.c_id=classify.id and (j.name like '%${keyword}%' or c.company_name
        like '%${keyword}%') and #{time} &amp; j.work_time &lt;&gt; 0
        <if test="l != -1">
            and j.low_salary &gt;=${l}
        </if>
        <if test="h != -1">
            and j.high_salary &lt;=${h}
        </if>
        <if test="c_id != 0">
            and classify.id=${c_id}
        </if>
        ORDER BY j.post_time desc
        <if test="page != 0">
            limit ${start},${count}
        </if>
    </select>

    <select id="getVagueJobCount" parameterType="hashmap" resultType="int">
        SELECT count(*) as num FROM tb_job j,tb_company c,tb_position p,tb_classify classify where
        j.type=p.id and j.post_company=c.id and p.c_id=classify.id and (j.name like '%${keyword}%' or c.company_name
        like '%${keyword}%') and #{time} &amp; j.work_time &lt;&gt; 0
        <if test="l != -1">
            and j.low_salary &gt;=#{l}
        </if>
        <if test="h != -1">
            and j.high_salary &lt;=#{h}
        </if>
        <if test="c_id != 0">
            and classify.id=#{c_id}
        </if>
    </select>

    <select id="getCommentCount" resultType="int" parameterType="int">
        SELECT count(*) FROM tb_job j,tb_user u,tb_comment m
        where m.u_id=u.id and m.j_id=j.id and m.j_id=#{id}
    </select>

    <update id="updateJob" parameterType="com.zzu.model.Job">
        update tb_job set type=#{type.id,jdbcType=NUMERIC},name=#{name},description=#{description},person_count=#{person_count},
        skill=#{skill},high_salary=#{high_salary},low_salary=#{low_salary},tag=#{tag},work_time=#{work_time},status=#{status} where id=#{id}
    </update>

    <update id="addJob" parameterType="com.zzu.model.Job">
        insert into tb_job(type,name,description,person_count,skill,high_salary,low_salary,post_time,post_company,tag,work_time,status)
        values(#{type.id,jdbcType=NUMERIC},#{name},#{description},#{person_count},#{skill},#{high_salary},#{low_salary},#{post_time},#{post_company.id,jdbcType=NUMERIC},#{tag},#{work_time},#{status})
    </update>

    <update id="deleteJobs" parameterType="int[]">
        delete from tb_job where id in
        <foreach collection="array" index="index" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </update>

    <select id="getPositionById" parameterType="int" resultType="com.zzu.model.Position">
        select * from tb_position where id=#{id}
    </select>

    <select id="getSchoolsAndMajors" resultMap="majorResultMap">
        select s.id as s_id,s.school,m.* from tb_school s,tb_major m where s.id = m.s_id
    </select>
</mapper>